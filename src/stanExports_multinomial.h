// Generated by rstantools.  Do not edit by hand.

/*
    rater is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rater is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rater.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_multinomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multinomial");
    reader.add_event(50, 48, "end", "model_multinomial");
    return reader;
}

#include <stan_meta_header.hpp>
 class model_multinomial : public prob_grad {
private:
    int K;
    int N;
    int I;
    vector<int> ii;
    vector<int> y;
    vector_d alpha;
    vector<vector_d> beta;
public:
    model_multinomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_multinomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_multinomial_namespace::model_multinomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("ii", "N", N);
            context__.validate_dims("data initialization", "ii", "int", context__.to_vec(N));
            validate_non_negative_index("ii", "N", N);
            ii = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ii");
            pos__ = 0;
            size_t ii_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ii_limit_0__; ++i_0__) {
                ii[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("alpha", "K", K);
            context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(K));
            validate_non_negative_index("alpha", "K", K);
            alpha = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            size_t alpha_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < alpha_i_vec_lim__; ++i_vec__) {
                alpha[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "K", K);
            context__.validate_dims("data initialization", "beta", "vector_d", context__.to_vec(K,K));
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "K", K);
            beta = std::vector<vector_d>(K,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
            vals_r__ = context__.vals_r("beta");
            pos__ = 0;
            size_t beta_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < beta_i_vec_lim__; ++i_vec__) {
                size_t beta_limit_0__ = K;
                for (size_t i_0__ = 0; i_0__ < beta_limit_0__; ++i_0__) {
                    beta[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"K",K,2);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"I",I,1);
            current_statement_begin__ = 5;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"ii[k0__]",ii[k0__],1);
                check_less_or_equal(function__,"ii[k0__]",ii[k0__],I);
            }
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"alpha",alpha,0);
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"beta[k0__]",beta[k0__],0);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("pi", "K", K);
            num_params_r__ += (K - 1);
            current_statement_begin__ = 13;
            validate_non_negative_index("theta", "K", K);
            validate_non_negative_index("theta", "K", K);
            num_params_r__ += (K - 1) * K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_multinomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("pi")))
            throw std::runtime_error("variable pi missing");
        vals_r__ = context__.vals_r("pi");
        pos__ = 0U;
        validate_non_negative_index("pi", "K", K);
        context__.validate_dims("initialization", "pi", "vector_d", context__.to_vec(K));
        vector_d pi(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            pi(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(pi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable pi: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "K", K);
        validate_non_negative_index("theta", "K", K);
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(K,K));
        std::vector<vector_d> theta(K,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                theta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.simplex_unconstrain(theta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi;
            (void) pi;  // dummy to suppress unused var warning
            if (jacobian__)
                pi = in__.simplex_constrain(K,lp__);
            else
                pi = in__.simplex_constrain(K);

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > theta;
            size_t dim_theta_0__ = K;
            theta.reserve(dim_theta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_theta_0__; ++k_0__) {
                if (jacobian__)
                    theta.push_back(in__.simplex_constrain(K,lp__));
                else
                    theta.push_back(in__.simplex_constrain(K));
            }


            // transformed parameters
            current_statement_begin__ = 17;
            validate_non_negative_index("log_p_z", "K", K);
            validate_non_negative_index("log_p_z", "I", I);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_p_z(I, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(K))));
            stan::math::initialize(log_p_z, DUMMY_VAR__);
            stan::math::fill(log_p_z,DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("log_pi", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_pi(static_cast<Eigen::VectorXd::Index>(K));
            (void) log_pi;  // dummy to suppress unused var warning

            stan::math::initialize(log_pi, DUMMY_VAR__);
            stan::math::fill(log_pi,DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("log_theta", "K", K);
            validate_non_negative_index("log_theta", "K", K);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_theta(K, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(K))));
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta,DUMMY_VAR__);


            current_statement_begin__ = 21;
            stan::math::assign(log_pi, stan::math::log(pi));
            current_statement_begin__ = 22;
            stan::math::assign(log_theta, stan::math::log(theta));
            current_statement_begin__ = 24;
            for (int i = 1; i <= I; ++i) {

                current_statement_begin__ = 25;
                stan::model::assign(log_p_z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_pi, 
                            "assigning variable log_p_z");
            }
            current_statement_begin__ = 28;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 29;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 30;
                    stan::model::assign(log_p_z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(ii,n,"ii",1)), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(get_base1(log_p_z,get_base1(ii,n,"ii",1),"log_p_z",1),k,"log_p_z",2) + get_base1(get_base1(log_theta,k,"log_theta",1),get_base1(y,n,"y",1),"log_theta",2))), 
                                "assigning variable log_p_z");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < I; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(log_p_z[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: log_p_z" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(log_pi(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_pi" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(log_theta[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: log_theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;

            // model body

            current_statement_begin__ = 38;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 39;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(theta,k,"theta",1), get_base1(beta,k,"beta",1)));
            }
            current_statement_begin__ = 42;
            lp_accum__.add(dirichlet_log<propto__>(pi, alpha));
            current_statement_begin__ = 44;
            for (int i = 1; i <= I; ++i) {

                current_statement_begin__ = 45;
                lp_accum__.add(log_sum_exp(get_base1(log_p_z,i,"log_p_z",1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi");
        names__.push_back("theta");
        names__.push_back("log_p_z");
        names__.push_back("log_pi");
        names__.push_back("log_theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_multinomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d pi = in__.simplex_constrain(K);
        vector<vector_d> theta;
        size_t dim_theta_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_theta_0__; ++k_0__) {
            theta.push_back(in__.simplex_constrain(K));
        }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(pi[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(theta[k_0__][k_1__]);
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 17;
            validate_non_negative_index("log_p_z", "K", K);
            validate_non_negative_index("log_p_z", "I", I);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_p_z(I, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(K))));
            stan::math::initialize(log_p_z, DUMMY_VAR__);
            stan::math::fill(log_p_z,DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("log_pi", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_pi(static_cast<Eigen::VectorXd::Index>(K));
            (void) log_pi;  // dummy to suppress unused var warning

            stan::math::initialize(log_pi, DUMMY_VAR__);
            stan::math::fill(log_pi,DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("log_theta", "K", K);
            validate_non_negative_index("log_theta", "K", K);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_theta(K, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(K))));
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta,DUMMY_VAR__);


            current_statement_begin__ = 21;
            stan::math::assign(log_pi, stan::math::log(pi));
            current_statement_begin__ = 22;
            stan::math::assign(log_theta, stan::math::log(theta));
            current_statement_begin__ = 24;
            for (int i = 1; i <= I; ++i) {

                current_statement_begin__ = 25;
                stan::model::assign(log_p_z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_pi, 
                            "assigning variable log_p_z");
            }
            current_statement_begin__ = 28;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 29;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 30;
                    stan::model::assign(log_p_z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(ii,n,"ii",1)), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(get_base1(log_p_z,get_base1(ii,n,"ii",1),"log_p_z",1),k,"log_p_z",2) + get_base1(get_base1(log_theta,k,"log_theta",1),get_base1(y,n,"y",1),"log_theta",2))), 
                                "assigning variable log_p_z");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < I; ++k_0__) {
                vars__.push_back(log_p_z[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(log_pi[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(log_theta[k_0__][k_1__]);
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_multinomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_p_z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_pi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (K - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_p_z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_pi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_multinomial_namespace::model_multinomial stan_model;


#endif
